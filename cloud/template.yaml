AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  SubscriptionEmail:
    Type: String
    Description: Email address for SNS subscription
    Default: mfahadm8@gmail.com

Globals:
  Api:
    OpenApiVersion: 3.0.1

Resources:
  ApiGwAccountConfig:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingRole.Arn"

  ApiGatewayLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  AWSApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: ApiGateway
      StageName: prod
      Cors:
        AllowMethods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: "/*" # allows for logging on any resource
          HttpMethod: "*" # allows for logging on any method

  UserCrudLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: "UserCrudLambda"
      Handler: index.lambda_handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 600
      CodeUri: .
      Role:
        Fn::GetAtt:
          - UserCrudLambdaRole
          - Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSTopic
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTable
      Events:
        PostUserEvent:
          Type: Api
          Properties:
            Path: /user
            Method: post
            RestApiId:
              Ref: AWSApiGateway
        GetUserEvent:
          Type: Api
          Properties:
            Path: /user
            Method: get
            RestApiId:
              Ref: AWSApiGateway

    Metadata:
      BuildMethod: makefile

  UserCrudLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: Lambda_Permissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                  - sns:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogGroups
                Resource:
                  Fn::Sub: arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*

  SNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: "User Updates Topic"

  SNSTopicSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Protocol: "email"
      Endpoint: !Ref SubscriptionEmail
      TopicArn: !Ref SNSTopic

  DynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: "UserTable"
      AttributeDefinitions:
        - AttributeName: "user_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "user_id"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"